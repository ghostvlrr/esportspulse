/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 30,
      }),
    ],
  })
);

// Bildirim gönderme fonksiyonu
const sendNotification = (title: string, options: NotificationOptions) => {
  self.registration.showNotification(title, {
    ...options,
    icon: '/notification-icon.png',
    badge: '/notification-badge.png',
    requireInteraction: true
  });
};

// Service Worker'a gelen mesajları dinle
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'NOTIFICATION') {
    sendNotification(event.data.title, event.data.options);
  }
});

// Bildirim tıklama olaylarını dinle
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action === 'open') {
    // Tüm client'ları kontrol et
    event.waitUntil(
      self.clients.matchAll({ type: 'window' }).then((clientList) => {
        // Eğer açık bir pencere varsa, onu odakla
        for (const client of clientList) {
          if (client.url === '/' && 'focus' in client) {
            return client.focus();
          }
        }
        // Yoksa yeni pencere aç
        if (self.clients.openWindow) {
          return self.clients.openWindow('/');
        }
      })
    );
  }
});

// Push olaylarını dinle
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    sendNotification(data.title, {
      body: data.body,
      data: data.data
    });
  }
});

// Service Worker'ı aktif et
self.addEventListener('activate', (event) => {
  event.waitUntil(
    Promise.all([
      // Tüm client'ları kontrol et
      self.clients.claim(),
      // Bildirim izinlerini kontrol et
      self.registration.pushManager.getSubscription().then((subscription) => {
        if (!subscription) {
          return self.registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: 'YOUR_VAPID_PUBLIC_KEY' // Backend'den alınacak
          });
        }
      })
    ])
  );
}); 